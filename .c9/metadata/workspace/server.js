{"filter":false,"title":"server.js","tooltip":"/server.js","undoManager":{"mark":4,"position":4,"stack":[[{"group":"doc","deltas":[{"start":{"row":113,"column":1},"end":{"row":113,"column":4},"action":"insert","lines":["});"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":198,"column":0},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var mongodb = require('mongodb');","var http = require('http');","var app = express();","var cors = require('cors');","var bodyParser = require('body-parser');","","var uri = 'mongodb://cmpe280:cmpe280@ds061701.mongolab.com:61701/cmpe280_user';","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","","    /**","     *  Populate the cache.","     */","    self.populateCache = function() {","        if (typeof self.zcache === \"undefined\") {","            self.zcache = { 'index.html': '' };","        }","","        //  Local cache for static content.","        self.zcache['index.html'] = fs.readFileSync('./index.html');","    };","","","    /**","     *  Retrieve entry (content) from cache.","     *  @param {string} key  Key identifying content to retrieve from cache.","     */","    self.cache_get = function(key) { return self.zcache[key]; };","","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","            res.send(self.cache_get('index.html') );","        };","    };","\t});","\t","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","        self.app = express.createServer();","\t\tself.app.use(bodyParser.urlencoded({","\t\t  extended: true","\t\t}));","\t\tself.app.use(bodyParser.json());","\t\tself.app.use(cors());","\t\tself.app.use(express.static('./public'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\tself.app.post('/', function (req, res) {","\t    console.log(JSON.stringify(req.body));","\t    ","\t    mongodb.MongoClient.connect(uri, function (err, db) {","\t        if(err) {","\t             res.send(\"Error while connecting to Mongo.\");","\t        } else {","\t            var collection = db.collection('user');","            ","                // Submit to the DB","                collection.insert({","                    \"fname\" : req.body.fname,","                    \"lname\" : req.body.lname,","                    \"email\" : req.body.email","                }, function (err, doc) {","                    if (err) {","                        // If it failed, return error","                        console.log(err);","                        res.send(\"There was a problem adding the information to the database.\");","                    }","                    else {","\t\t\t\t\t\t//console.log(\"Data saved successfully.\");","                        res.status(200).json({msg:\"Data saved successfully\"});","                    }","                });","\t        }","\t    });","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.populateCache();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();",""]},{"start":{"row":0,"column":0},"end":{"row":226,"column":0},"action":"insert","lines":["<<<<<<< HEAD","/**"," * "," */","//mongodb://<dbuser>:<dbpassword>@ds061701.mongolab.com:61701/cmpe280_user","var mongodb = require('mongodb');","var http = require('http');","var express = require('express');","var app = express();","var cors = require('cors');","var bodyParser = require('body-parser');","","var uri = 'mongodb://cmpe280:cmpe280@ds061701.mongolab.com:61701/cmpe280_user';","","","app.use(bodyParser.urlencoded({","\t  extended: true","\t}));","app.use(bodyParser.json());","app.use(cors());","app.use(express.static('./public'));","","\tapp.post('/', function (req, res) {","\t    console.log(JSON.stringify(req.body));","\t    ","\t    mongodb.MongoClient.connect(uri, function (err, db) {","\t        if(err) {","\t             res.send(\"Error while connecting to Mongo.\");","\t        } else {","\t            var collection = db.collection('user');","            ","                // Submit to the DB","                collection.insert({","                    \"fname\" : req.body.fname,","                    \"lname\" : req.body.lname,","                    \"email\" : req.body.email","                }, function (err, doc) {","                    if (err) {","                        // If it failed, return error","                         console.log(err);","                        res.send(\"There was a problem adding the information to the database.\");","                    }","                    else {","                     console.log(\"Data saved successfully.\");","                        res.status(200).json({msg:\"Data saved successfully\"});","                    }","                });","\t        }","\t    });","\t});","\t","\tvar ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","    var port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","","    if (typeof ipaddress === \"undefined\") {","        //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","        //  allows us to run/test the app locally.","        console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","        ipaddress = \"127.0.0.1\";","    };","    ","\tapp.listen(port, ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...', Date(Date.now()), ipaddress, port);","    });","","","=======","#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","","    /**","     *  Populate the cache.","     */","    self.populateCache = function() {","        if (typeof self.zcache === \"undefined\") {","            self.zcache = { 'index.html': '' };","        }","","        //  Local cache for static content.","        self.zcache['index.html'] = fs.readFileSync('./index.html');","    };","","","    /**","     *  Retrieve entry (content) from cache.","     *  @param {string} key  Key identifying content to retrieve from cache.","     */","    self.cache_get = function(key) { return self.zcache[key]; };","","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","            res.send(self.cache_get('index.html') );","        };","    };","","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","        self.app = express.createServer();","","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.populateCache();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();",""]}]}],[{"group":"doc","deltas":[{"start":{"row":225,"column":13},"end":{"row":226,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":227,"column":0},"action":"remove","lines":["<<<<<<< HEAD","/**"," * "," */","//mongodb://<dbuser>:<dbpassword>@ds061701.mongolab.com:61701/cmpe280_user","var mongodb = require('mongodb');","var http = require('http');","var express = require('express');","var app = express();","var cors = require('cors');","var bodyParser = require('body-parser');","","var uri = 'mongodb://cmpe280:cmpe280@ds061701.mongolab.com:61701/cmpe280_user';","","","app.use(bodyParser.urlencoded({","\t  extended: true","\t}));","app.use(bodyParser.json());","app.use(cors());","app.use(express.static('./public'));","","\tapp.post('/', function (req, res) {","\t    console.log(JSON.stringify(req.body));","\t    ","\t    mongodb.MongoClient.connect(uri, function (err, db) {","\t        if(err) {","\t             res.send(\"Error while connecting to Mongo.\");","\t        } else {","\t            var collection = db.collection('user');","            ","                // Submit to the DB","                collection.insert({","                    \"fname\" : req.body.fname,","                    \"lname\" : req.body.lname,","                    \"email\" : req.body.email","                }, function (err, doc) {","                    if (err) {","                        // If it failed, return error","                         console.log(err);","                        res.send(\"There was a problem adding the information to the database.\");","                    }","                    else {","                     console.log(\"Data saved successfully.\");","                        res.status(200).json({msg:\"Data saved successfully\"});","                    }","                });","\t        }","\t    });","\t});","\t","\tvar ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","    var port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","","    if (typeof ipaddress === \"undefined\") {","        //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","        //  allows us to run/test the app locally.","        console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","        ipaddress = \"127.0.0.1\";","    };","    ","\tapp.listen(port, ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...', Date(Date.now()), ipaddress, port);","    });","","","=======","#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","","    /**","     *  Populate the cache.","     */","    self.populateCache = function() {","        if (typeof self.zcache === \"undefined\") {","            self.zcache = { 'index.html': '' };","        }","","        //  Local cache for static content.","        self.zcache['index.html'] = fs.readFileSync('./index.html');","    };","","","    /**","     *  Retrieve entry (content) from cache.","     *  @param {string} key  Key identifying content to retrieve from cache.","     */","    self.cache_get = function(key) { return self.zcache[key]; };","","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","            res.send(self.cache_get('index.html') );","        };","    };","","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","        self.app = express.createServer();","","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.populateCache();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();","",""]},{"start":{"row":0,"column":0},"end":{"row":196,"column":0},"action":"insert","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var mongodb = require('mongodb');","var http = require('http');","var app = express();","var cors = require('cors');","var bodyParser = require('body-parser');","","var uri = 'mongodb://cmpe280:cmpe280@ds061701.mongolab.com:61701/cmpe280_user';","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","","    /**","     *  Populate the cache.","     */","    self.populateCache = function() {","        if (typeof self.zcache === \"undefined\") {","            self.zcache = { 'index.html': '' };","        }","","        //  Local cache for static content.","        self.zcache['index.html'] = fs.readFileSync('./index.html');","    };","","","    /**","     *  Retrieve entry (content) from cache.","     *  @param {string} key  Key identifying content to retrieve from cache.","     */","    self.cache_get = function(key) { return self.zcache[key]; };","","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","            res.send(self.cache_get('index.html') );","        };","    };","","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","        self.app = express.createServer();","\t\tself.app.use(bodyParser.urlencoded({","\t\t\t  extended: true","\t\t\t}));","\t\tself.app.use(bodyParser.json());","\t\tself.app.use(cors());","\t\tself.app.use(express.static('./public'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\tself.app.post('/', function (req, res) {","\t    console.log(JSON.stringify(req.body));","\t    ","\t\t\tmongodb.MongoClient.connect(uri, function (err, db) {","\t\t\t\tif(err) {","\t\t\t\t\t res.send(\"Error while connecting to Mongo.\");","\t\t\t\t} else {","\t\t\t\t\tvar collection = db.collection('user');","\t\t\t\t","\t\t\t\t\t// Submit to the DB","\t\t\t\t\tcollection.insert({","\t\t\t\t\t\t\"fname\" : req.body.fname,","\t\t\t\t\t\t\"lname\" : req.body.lname,","\t\t\t\t\t\t\"email\" : req.body.email","\t\t\t\t\t}, function (err, doc) {","\t\t\t\t\t\tif (err) {","\t\t\t\t\t\t\t// If it failed, return error","\t\t\t\t\t\t\t console.log(err);","\t\t\t\t\t\t\tres.send(\"There was a problem adding the information to the database.\");","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t console.log(\"Data saved successfully.\");","\t\t\t\t\t\t\tres.status(200).json({msg:\"Data saved successfully\"});","\t\t\t\t\t\t}","\t\t\t\t\t});","\t\t\t\t}","\t\t\t});","\t\t});","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.populateCache();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":188,"column":4},"end":{"row":188,"column":32},"action":"remove","lines":[" /*  Sample Application.  */"]}]}]]},"ace":{"folds":[],"scrolltop":1876.9012145996094,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1428577215000,"hash":"a238780bd9b55d15c24e46a98b367f83a3870ecb"}